// <auto-generated />
using System;
using InventarioFarmacia_Back;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventarioFarmacia_Back.Migrations
{
    [DbContext(typeof(PharmDBContext))]
    [Migration("20250802032045_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("CategoriaProducto", b =>
                {
                    b.Property<int>("CategoriasId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductosId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoriasId", "ProductosId");

                    b.HasIndex("ProductosId");

                    b.ToTable("Categoria_Productos", (string)null);
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Bitacora_Inventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha_Actualizacion")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id_Inventario")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Usuario")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InventarioId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Motivo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo_Accion")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id_Inventario")
                        .HasDatabaseName("IX_Bitacora_Inventarios_Id_Inventario");

                    b.HasIndex("Id_Usuario");

                    b.HasIndex("InventarioId");

                    b.ToTable("Bitacora_Inventarios");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Bitacora_Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Campo_Modificado")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha_Cambio")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id_Producto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Usuario")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Motivo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Valor_Anterior")
                        .HasColumnType("TEXT");

                    b.Property<string>("Valor_Nuevo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id_Producto")
                        .HasDatabaseName("IX_Bitacora_Productos_Id_Producto");

                    b.HasIndex("Id_Usuario");

                    b.ToTable("Bitacora_Productos");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Detalle_Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_OrdenDeCompra")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_ProductoIndividual")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id_OrdenDeCompra");

                    b.HasIndex("Id_ProductoIndividual")
                        .IsUnique();

                    b.ToTable("Detalle_Compras");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Detalle_Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id_Producto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Venta")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id_Producto");

                    b.HasIndex("Id_Venta")
                        .HasDatabaseName("IX_Detalle_Ventas_Id_Venta");

                    b.ToTable("Detalle_Ventas");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Inventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<int>("Total_Productos")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Ultima_Actualizacion")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Inventarios");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Lote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nro_Lote")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lotes");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Orden_Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Fecha_Pedido")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha_Recibo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orden_Compras");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre_Clinico")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio_Caja")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio_Unitario")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ruta_Imagen")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Producto_Individual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Fecha_Vencimiento")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id_Inventario")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id_Producto")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nro_Lote")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Id_Inventario");

                    b.HasIndex("Id_Producto");

                    b.HasIndex("Nro_Lote")
                        .HasDatabaseName("IX_Productos_Individuales_Nro_Lote");

                    b.ToTable("Productos_Individuales");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad_Productos")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Costo_Total")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Fecha_Venta")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Id_Usuario")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id_Usuario");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("CategoriaProducto", b =>
                {
                    b.HasOne("InventarioFarmacia_Back.Categoria", null)
                        .WithMany()
                        .HasForeignKey("CategoriasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventarioFarmacia_Back.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Bitacora_Inventario", b =>
                {
                    b.HasOne("InventarioFarmacia_Back.Inventario", null)
                        .WithMany("BitacoraInventarios")
                        .HasForeignKey("Id_Inventario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventarioFarmacia_Back.Usuario", null)
                        .WithMany("BitacoraInventarios")
                        .HasForeignKey("Id_Usuario")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("InventarioFarmacia_Back.Inventario", "Inventario")
                        .WithMany()
                        .HasForeignKey("InventarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventario");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Bitacora_Producto", b =>
                {
                    b.HasOne("InventarioFarmacia_Back.Producto", null)
                        .WithMany("BitacoraProductos")
                        .HasForeignKey("Id_Producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventarioFarmacia_Back.Usuario", null)
                        .WithMany("BitacoraProductos")
                        .HasForeignKey("Id_Usuario")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Detalle_Compra", b =>
                {
                    b.HasOne("InventarioFarmacia_Back.Orden_Compra", "OrdenCompra")
                        .WithMany("DetalleCompras")
                        .HasForeignKey("Id_OrdenDeCompra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventarioFarmacia_Back.Producto_Individual", "ProductoIndividual")
                        .WithOne("DetalleCompras")
                        .HasForeignKey("InventarioFarmacia_Back.Detalle_Compra", "Id_ProductoIndividual")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdenCompra");

                    b.Navigation("ProductoIndividual");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Detalle_Venta", b =>
                {
                    b.HasOne("InventarioFarmacia_Back.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("Id_Producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventarioFarmacia_Back.Venta", "Venta")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("Id_Venta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Producto_Individual", b =>
                {
                    b.HasOne("InventarioFarmacia_Back.Inventario", "Inventario")
                        .WithMany("ProductosIndividuales")
                        .HasForeignKey("Id_Inventario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventarioFarmacia_Back.Producto", "Producto")
                        .WithMany("ProductosIndividuales")
                        .HasForeignKey("Id_Producto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventarioFarmacia_Back.Lote", "Lote")
                        .WithMany("ProductosIndividuales")
                        .HasForeignKey("Nro_Lote")
                        .HasPrincipalKey("Nro_Lote")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Inventario");

                    b.Navigation("Lote");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Venta", b =>
                {
                    b.HasOne("InventarioFarmacia_Back.Usuario", "Usuario")
                        .WithMany("Ventas")
                        .HasForeignKey("Id_Usuario")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Inventario", b =>
                {
                    b.Navigation("BitacoraInventarios");

                    b.Navigation("ProductosIndividuales");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Lote", b =>
                {
                    b.Navigation("ProductosIndividuales");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Orden_Compra", b =>
                {
                    b.Navigation("DetalleCompras");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Producto", b =>
                {
                    b.Navigation("BitacoraProductos");

                    b.Navigation("ProductosIndividuales");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Producto_Individual", b =>
                {
                    b.Navigation("DetalleCompras")
                        .IsRequired();
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Usuario", b =>
                {
                    b.Navigation("BitacoraInventarios");

                    b.Navigation("BitacoraProductos");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("InventarioFarmacia_Back.Venta", b =>
                {
                    b.Navigation("DetalleVentas");
                });
#pragma warning restore 612, 618
        }
    }
}
