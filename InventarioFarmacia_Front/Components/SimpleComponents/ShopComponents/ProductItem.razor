@using InventarioFarmacia_Front.Services
@using InventarioFarmacia_Shared.DTOs.Products;
@using InventarioFarmacia_Shared.DTOs.Lotes;
@using System.ComponentModel
@rendermode InteractiveServer

@if (ProductSelected && Id_Selected_Product != -1)
{
    <div class="container-fluid card d-flex mb-3">
        <div class="card-body row g-3">
            <div class="col-4">
                <div class="border rounded p-3 bg-light d-flex">
                    <div class="me-3">
                        <img src="@SelectedProduct.Ruta_Imagen" class="img-fluid rounded shadow-sm"
                            style="height: 150px; width: 175px; object-fit: cover;" />
                    </div>
                    <div class="row">
                        <div class="bg-primary text-white rounded p-2 text-center">
                            <h6 class="fw-bold mb-1">@SelectedProduct.Nombre</h6>
                            <small class="opacity-75">@SelectedProduct.Nombre_Clinico</small>
                        </div>

                        <div class="row g-2">
                            <div class="col-6">
                                <div class="border rounded p-2 text-center bg-white">
                                    <div class="fw-bold text-success">Bs. @SelectedProduct.Precio_Unitario</div>
                                    <small class="text-muted">Unidad</small>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="border rounded p-2 text-center bg-white">
                                    <div class="fw-bold text-success">Bs. @SelectedProduct.Precio_Caja</div>
                                    <small class="text-muted">Caja</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-8">
                <div class=" row border rounded py-3 px-2 h-100 d-flex flex-column">
                    <div class="d-flex flex-column col-8">
                        <div class="d-flex justify-content-evenly align-items-center rounded bg-secondary-subtle p-2">
                            <div class="d-flex gap-3 border-end pe-3 border-2 border-dark">
                                <div class="d-flex gap-3">
                                    <label class="fw-semibold">Unidad</label>
                                    <input type="radio" name="Unidad" value="UNIT" class="form-check-input" />
                                </div>

                                <div class="d-flex gap-3">
                                    <label class="fw-semibold">Caja</label>
                                    <input type="radio" name="Unidad" value="BOX" class="form-check-input" />
                                </div>
                            </div>
                            <div class="d-flex gap-3">
                                <span><strong>Total de productos individuales:</strong></span>
                                <span class="badge bg-primary fs-6">0 unidades</span>
                            </div>
                        </div>

                        <div
                            class="border rounded p-2 d-flex flex-column justify-content-between align-items-center bg-white">
                            <div class="input-group">
                                <span class="input-group-text bg-white border-end-0">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control border-start-0"
                                    placeholder="Buscar lotes por número de lote..." @oninput="(e) => FiltrarLotes(e)" />
                            </div>
                            <div class="container">
                                @foreach (var lote in SelectedProduct.Lotes ?? Enumerable.Empty<LoteToNewCompraDTO>())
                                {
                                    <input type="number" class="form-control my-2" value="@lote.Cantidad_Productos" disabled />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="my-3">
        <select class="form-select" @bind="Id_Selected_Product">
            <option value="-1">Seleccione un producto</option>
            @foreach (var item in lstProductosDisponibles.Where(p => !lstIdProductosSeleccionados.Contains(p.Id)))
            {
                <option value="@item.Id">@item.Nombre</option>
            }
        </select>
    </div>
}

@code {
    [CascadingParameter(Name = "ProductosDisponibles")]
    public List<ProductoToNewCompraDTO> lstProductosDisponibles { get; set; } = new();
    [CascadingParameter(Name = "ProductosSeleccionados")]
    public List<int> lstIdProductosSeleccionados { get; set; } = new();

    public bool ProductSelected { get; set; } = false;
    public ProductoToNewCompraDTO SelectedProduct { get; set; } = new();
    private int _idSelectedProduct = -1;
    public int Id_Selected_Product
    {
        get => _idSelectedProduct;
        set
        {
            _idSelectedProduct = value;
            SeleccionarProducto(value);
            OnRemoveProduct.InvokeAsync(value);
        }
    }

    private void SeleccionarProducto(int Id_Producto)
    {
        var selectedValue = Id_Producto;
        var productoSeleccionado = lstProductosDisponibles.FirstOrDefault(p => p.Id == selectedValue);
        if (productoSeleccionado != null)
        {
            SelectedProduct = productoSeleccionado;
            ProductSelected = true;
        }
        StateHasChanged();
    }


    private void FiltrarLotes(ChangeEventArgs e)
    {
        var filtro = e.Value?.ToString()?.Trim().ToLower() ?? string.Empty;
        if (string.IsNullOrEmpty(filtro))
        {
            SelectedProduct.Lotes = SelectedProduct.Lotes;
        }
        else
        {
            SelectedProduct.Lotes = SelectedProduct.Lotes?
            .Where(l => l.Nro_Lote.ToLower().Contains(filtro))
            .ToList() ?? new List<LoteToNewCompraDTO>();
        }
        StateHasChanged();
    }

    [Parameter]
    public EventCallback<int> OnRemoveProduct { get; set; }

    [Parameter]
    public EventCallback<int> OnTotalChanged { get; set; }



}
