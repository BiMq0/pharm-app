@using InventarioFarmacia_Front.Services
@using InventarioFarmacia_Shared.DTOs.Products;
@using InventarioFarmacia_Shared.DTOs.Lotes;
@using System.ComponentModel
@inject Services.Lotes.ILoteService LoteService
@rendermode InteractiveServer

@if (ProductSelected && Id_Selected_Product != -1)
{
    <div class="container-fluid card d-flex mb-3">
        <div class="card-body row g-3">
            <div class="col-4">
                <div class="border rounded p-3 bg-light d-flex">
                    <div class="me-3">
                        <img src="@SelectedProduct.Ruta_Imagen" class="img-fluid rounded shadow-sm"
                            style="height: 150px; width: 175px; object-fit: cover;" />
                    </div>
                    <div class="row">
                        <div class="bg-primary text-white rounded p-2 text-center">
                            <h6 class="fw-bold mb-1">@SelectedProduct.Nombre</h6>
                            <small class="opacity-75">@SelectedProduct.Nombre_Clinico</small>
                        </div>

                        <div class="row g-2">
                            <div class="col-6">
                                <div class="border rounded p-2 text-center bg-white">
                                    <div class="fw-bold text-success">Bs. @SelectedProduct.Precio_Unitario</div>
                                    <small class="text-muted">Unidad</small>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="border rounded p-2 text-center bg-white">
                                    <div class="fw-bold text-success">Bs. @SelectedProduct.Precio_Caja</div>
                                    <small class="text-muted">Caja</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-6 d-flex justify-content-between">
                <div class=" row border rounded py-3 px-2 h-100 d-flex flex-column w-100">
                    <div class="d-flex flex-column col-12">
                        <div class="d-flex justify-content-evenly align-items-center rounded bg-secondary-subtle p-2">
                            @* <div class="d-flex gap-3 border-end pe-3 border-2 border-dark">
                                <div class="d-flex gap-3">
                                    <label class="fw-semibold">Unidad</label>
                                    <input type="radio" name="Unidad" value="UNIT" class="form-check-input" />
                                </div>

                                <div class="d-flex gap-3">
                                    <label class="fw-semibold">Caja</label>
                                    <input type="radio" name="Unidad" value="BOX" class="form-check-input" />
                                </div>
                            </div> 
                            <div class="d-flex gap-3">
                                <span><strong>Total de productos individuales:</strong></span>
                                <span class="badge bg-primary fs-6">0 unidades</span>
                            </div>
                            *@
                        </div>

                        <div
                            class="border rounded p-2 d-flex flex-column justify-content-between align-items-center bg-white">
                            <div class="input-group">
                                <span class="input-group-text bg-white border-end-0">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control border-start-0"
                                    placeholder="Buscar lotes por número de lote..." @oninput="(e) => FiltrarLotes(e)" />
                            </div>
                            <div class="container overflow-auto" style="max-height: 150px;">
                                @foreach (var lote in SelectedProduct.Lotes ?? Enumerable.Empty<LoteToNewCompraDTO>())
                                {
                                    <div class="d-flex justify-content-around align-items-center my-2 border rounded p-2">
                                        <input class="form-control text-center" style="max-width: 15%;" type="number" min="0"
                                            value="0" @onchange="(e) => ActualizarTotalLote(e, lote.Id)" />
                                        <div class="p-2 border rounded mx-2 d-flex justify-content-between gap-2"
                                            style="max-width: 60%;">
                                            <div class="d-flex  align-items-center">
                                                <span class="fw-semibold">Lote: @lote.Nro_Lote</span>
                                            </div>
                                            <div class="d-flex align-items-center gap-2">
                                                <span class="fw-semibold" style="font-size: small;">Vence en:</span>
                                                <span
                                                    class="badge bg-primary">@lote.Fecha_Vencimiento.ToShortDateString()</span>
                                            </div>
                                        </div>
                                        <div
                                            class="d-flex justify-content-between align-items-center bg-warning-subtle py-1 px-2 rounded gap-2">
                                            <span class="text-muted text-center" style="font-size: smaller;">Stock Actual: </span>
                                            <span class="text-muted text-center fw-bold fs-3">@lote.Cantidad_Productos</span>
                                        </div>

                                    </div>
                                }

                                @if (CreandoNuevoLote)
                                {
                                    <NewLoteForm OnCrearLote="HandleCrearLote"
                                        OnCancelarCreacion="@(() => CreandoNuevoLote = false)" />
                                }
                                <button class="btn btn-outline-primary w-100 mt-2" disabled="@CreandoNuevoLote" @onclick="() => CreandoNuevoLote = true">
                                    <i class="bi bi-plus-circle"></i> @(CreandoNuevoLote ? "Creando Lote..." : "Agregar Nuevo Lote")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-2">
                <div class="card shadow-sm border-primary">
                    <div class="card-body p-3">
                        <h6 class="card-title text-center text-primary mb-3">Nuevo Precio (Bs)</h6>
                        <div class="input-group mb-3">
                            <span class="input-group-text bg-primary text-white"><i
                                    class="bi bi-currency-dollar"></i></span>
                            <input type="number" class="form-control" min="0" step="0.1" placeholder="Ej: 12.50" @bind="@NuevoPrecio" />
                        </div>
                        <h6 class="card-title text-center text-secondary mt-4 mb-2">Inventario destino</h6>
                        <div class="input-group">
                            <span class="input-group-text bg-secondary text-white"><i class="bi bi-box-seam"></i></span>
                            <input type="number" class="form-control" min="1" max="2" @bind="InventarioDestino"/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="my-3">
        <select class="form-select" @bind="Id_Selected_Product">
            <option value="-1">Seleccione un producto</option>
            @foreach (var item in lstProductosDisponibles.Where(p => !lstIdProductosSeleccionados.Contains(p.Id)))
            {
                <option value="@item.Id">@item.Nombre</option>
            }
        </select>
    </div>
}

@code {
    @code {
    [CascadingParameter(Name = "ProductosDisponibles")]
    public List<ProductoToNewCompraDTO> lstProductosDisponibles { get; set; } = new();
    [CascadingParameter(Name = "ProductosSeleccionados")]
    public List<int> lstIdProductosSeleccionados { get; set; } = new();

    public bool ProductSelected { get; set; } = false;
    public ProductoToNewCompraDTO SelectedProduct { get; set; } = new();
    private int _idSelectedProduct = -1;
    public int Id_Selected_Product
    {
        get => _idSelectedProduct;
        set
        {
            _idSelectedProduct = value;
            SeleccionarProducto(value);
            OnRemoveProduct.InvokeAsync(value);
        }
    }

    public List<LoteToNewCompraDTO> LotesToAddProducts { get; set; } = new();
    public Dictionary<int, int> CantidadesPorLote { get; set; } = new();
    
    public decimal NuevoPrecio { get; set; } = 0;
    public int InventarioDestino { get; set; } = 2;

    public bool CreandoNuevoLote { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        LotesToAddProducts = new List<LoteToNewCompraDTO>();
        CantidadesPorLote = new Dictionary<int, int>();
        await base.OnInitializedAsync();
    }
    
    private void SeleccionarProducto(int Id_Producto)
    {
        var selectedValue = Id_Producto;
        var productoSeleccionado = lstProductosDisponibles.FirstOrDefault(p => p.Id == selectedValue);
        if (productoSeleccionado != null)
        {
            SelectedProduct = productoSeleccionado;
            ProductSelected = true;
            
            SincronizarLotesAuxiliares();
        }
        StateHasChanged();
    }

    private void SincronizarLotesAuxiliares()
    {
        if (SelectedProduct.Lotes != null)
        {
            LotesToAddProducts = SelectedProduct.Lotes.ToList();
            
            CantidadesPorLote.Clear();
            foreach (var lote in LotesToAddProducts)
            {
                CantidadesPorLote[lote.Id] = 0;
            }
        }
        else
        {
            LotesToAddProducts = new List<LoteToNewCompraDTO>();
            CantidadesPorLote = new Dictionary<int, int>();
        }
    }

    private void FiltrarLotes(ChangeEventArgs e)
    {
        var filtro = e.Value?.ToString()?.Trim().ToLower() ?? string.Empty;
        if (string.IsNullOrEmpty(filtro))
        {
            LotesToAddProducts = SelectedProduct.Lotes?.ToList() ?? new List<LoteToNewCompraDTO>();
        }
        else
        {
            LotesToAddProducts = SelectedProduct.Lotes?
                .Where(l => l.Nro_Lote.ToLower().Contains(filtro))
                .OrderByDescending(l => l.Nro_Lote.ToLower().Contains(filtro))
                .ToList() ?? new List<LoteToNewCompraDTO>();
        }
        StateHasChanged();
    }

    [Parameter]
    public EventCallback<int> OnRemoveProduct { get; set; }

    public async Task HandleCrearLote(LoteNuevoDTO loteNuevo)
    {
        loteNuevo.Id_Producto = SelectedProduct.Id;
        var loteCreado = await LoteService.CrearLoteAsync(loteNuevo);
        if (loteCreado != null)
        {
            CreandoNuevoLote = false;

            SelectedProduct.Lotes?.Add(loteCreado);
            LotesToAddProducts.Add(loteCreado);
            CantidadesPorLote[loteCreado.Id] = 0;
        }
        StateHasChanged();
    }

    private int cantidadTotalProductosIndividuales = 0;
    
    private void ActualizarTotalLote(ChangeEventArgs e, int loteId)
    {
        if (int.TryParse(e.Value?.ToString(), out var cantidad))
        {
            CantidadesPorLote[loteId] = cantidad;
            
            cantidadTotalProductosIndividuales = CantidadesPorLote.Values.Sum();
            
            OnTotalChanged.InvokeAsync(cantidadTotalProductosIndividuales);
        }
        StateHasChanged();
    }
    
    [Parameter]
    public EventCallback<int> OnTotalChanged { get; set; }
}
}
