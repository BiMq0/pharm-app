@using InventarioFarmacia_Shared.DTOs.Lotes
@rendermode InteractiveServer
<div class="d-flex gap-2 mb-2 w-100">
    @if (CreandoLote) // Modo formulario para crear nuevo lote
    {
        <EditForm Model="LoteNuevo" OnValidSubmit="CrearLote" class="w-100">
            <DataAnnotationsValidator />
            <div class="d-flex gap-2">
                <div class="w-25">
                    <div class="input-group mb-2">
                        <i class="bi bi-pencil input-group-text"></i>
                        <InputNumber class="form-control" placeholder="Cantidad" @bind-Value="LoteNuevo.Cantidad_Productos"
                            min="0" />
                    </div>
                    <ValidationMessage For="@(() => LoteNuevo.Cantidad_Productos)" class="text-danger small" />
                </div>
                <div class="d-flex flex-column w-50">
                    <div class="input-group">
                        <i class="bi bi-check-circle input-group-text"></i>
                        <InputText class="form-control" placeholder="Ingrese el número de lote"
                            @bind-Value="LoteNuevo.Nro_Lote" />
                    </div>
                    <ValidationMessage For="@(() => LoteNuevo.Nro_Lote)" class="text-danger small" />
                </div>
                <div class="d-flex flex-column w-25">
                    <InputDate class="form-control" @bind-Value="LoteNuevo.Fecha_Vencimiento" />
                    <ValidationMessage For="@(() => LoteNuevo.Fecha_Vencimiento)" class="text-danger small" />
                </div>
            </div>

            <button class="btn btn-success mt-2 w-100" type="submit">
                <i class="bi bi-box"></i>
                <span>Crear nuevo lote</span>
            </button>
        </EditForm>
    }
    else if (!AllSelected) // Modo selección de lote existente
    {
        <select class="form-select w-75" @bind="Id_Selected_Lote">
            <option value="-1">Seleccionar Lote</option>
            @foreach (var lote in LotesDisponiblesLibres)
            {
                <option value="@lote.Id">
                    @lote.Nro_Lote - @lote.Cantidad_Productos unidades - Vence: @lote.Fecha_Vencimiento.ToString("dd/MM/yyyy")
                </option>
            }
        </select>

        <button class="btn btn-outline-danger btn-sm w-25" @onclick="RemoverLote" type="button">
            <i class="bi bi-trash"></i> Cancelar
        </button>
    }
    else // Modo lote seleccionado con cantidad editable
    {
        <div class="input-group w-25">
            <i class="bi bi-pencil input-group-text"></i>
            <input type="number" class="form-control" min="0" placeholder="Cantidad" @bind="CantidadSeleccionada"
                @bind:after="OnCantidadChangedAfterBinding" max="@LoteData.Cantidad_Productos" />
        </div>

        <div class="w-50 d-flex align-items-center">
            <span class="badge bg-primary me-2">@LoteData.Nro_Lote</span>
            <span class="text-muted small">Vence: @LoteData.Fecha_Vencimiento.ToString("dd/MM/yyyy")</span>
        </div>

        <button class="btn btn-outline-danger btn-sm w-25" @onclick="RemoverLote" type="button">
            <i class="bi bi-trash"></i> Remover
        </button>
    }
</div>


@code {
    [Parameter]
    public LoteToNewCompraDTO LoteData { get; set; } = new();

    [CascadingParameter(Name = "LotesDisponibles")]
    public List<LoteToNewCompraDTO> LotesDisponibles { get; set; } = new();

    [CascadingParameter(Name = "lstIdLotesSeleccionados")]
    public List<int> lstIdLotesSeleccionados { get; set; } = new();

    public LoteToNewCompraDTO SelectedLote { get; set; } = new();
    public LoteNuevoDTO LoteNuevo { get; set; } = new();

    private int CantidadSeleccionada { get; set; } = 1;
    private bool LoteSeleccionado = false;

    public bool AllSelected => lstIdLotesSeleccionados.Count >= LotesDisponibles.Count;
    public IEnumerable<LoteToNewCompraDTO> LotesDisponiblesLibres =>
    LotesDisponibles.Where(l => !lstIdLotesSeleccionados.Contains(l.Id));

    private int _idSelected_Lote = -1;
    public int Id_Selected_Lote
    {
        get => _idSelected_Lote;
        set
        {
            _idSelected_Lote = value;
            _ = SeleccionarLote(value);

            if (value != -1)
            {
                OnLoteSeleccionado.InvokeAsync(value);
            }
        }
    }
    [Parameter] public EventCallback<int> OnLoteSeleccionado { get; set; }
    [Parameter] public EventCallback<int> OnRemoveLote { get; set; }
    [Parameter] public EventCallback<LoteToNewCompraDTO> OnLoteCreado { get; set; }
    [Parameter] public EventCallback<(int loteId, int cantidad)> OnCantidadChanged { get; set; }

    public bool CreandoLote { get; set; } = false;
    protected override void OnInitialized()
    {
        if (LoteData.Id != -1)
        {
            Id_Selected_Lote = LoteData.Id;
            SelectedLote = LoteData;
            CantidadSeleccionada = LoteData.Cantidad_Productos;
            LoteSeleccionado = false;
            CreandoLote = false;
        }
        else
        {
            CreandoLote = true;
            LoteSeleccionado = false;
        }
        StateHasChanged();
    }

    public async Task SeleccionarLote(int id)
    {
        if (id != -1)
        {
            var lote = LotesDisponibles.FirstOrDefault(l => l.Id == id);
            if (lote != null)
            {
                LoteSeleccionado = true;
                SelectedLote = lote;
                LoteData = lote;
                CantidadSeleccionada = lote.Cantidad_Productos;
                lstIdLotesSeleccionados.Add(id);

                await OnCantidadChanged.InvokeAsync((id, CantidadSeleccionada));
                StateHasChanged();
            }
        }
    }

    private async Task OnCantidadChangedAfterBinding()
    {
        var maxCantidad = LoteData?.Cantidad_Productos ?? 999;

        if (CantidadSeleccionada < 0)
        {
            CantidadSeleccionada = 0;
        }
        else if (CantidadSeleccionada > maxCantidad)
        {
            CantidadSeleccionada = maxCantidad;
        }

        if (LoteData?.Id != -1 && LoteData != null)
        {
            await OnCantidadChanged.InvokeAsync((LoteData.Id, CantidadSeleccionada));
        }

        StateHasChanged();
    }


    public async Task CrearLote()
    {
        var nuevoLote = new LoteToNewCompraDTO
        {
            Id = DateTime.Now.Millisecond + new Random().Next(1000, 9999),
            Cantidad_Productos = LoteNuevo.Cantidad_Productos,
            Nro_Lote = LoteNuevo.Nro_Lote,
            Fecha_Vencimiento = LoteNuevo.Fecha_Vencimiento
        };

        // Agregar a la lista de lotes disponibles si no existe
        if (!LotesDisponibles.Any(l => l.Id == nuevoLote.Id))
        {
            LotesDisponibles.Add(nuevoLote);
        }

        LoteData = nuevoLote;
        Id_Selected_Lote = nuevoLote.Id;
        CantidadSeleccionada = nuevoLote.Cantidad_Productos;
        SelectedLote = nuevoLote;
        lstIdLotesSeleccionados.Add(nuevoLote.Id);

        CreandoLote = false;
        LoteSeleccionado = true;

        await OnLoteCreado.InvokeAsync(nuevoLote);
        await OnLoteSeleccionado.InvokeAsync(nuevoLote.Id);
        await OnCantidadChanged.InvokeAsync((nuevoLote.Id, CantidadSeleccionada));

        LoteNuevo = new();

        StateHasChanged();
    }

    public async Task RemoverLote()
    {
        var loteId = LoteData?.Id ?? Id_Selected_Lote;

        if (loteId != -1)
        {
            // Remover de la lista de lotes seleccionados para que quede disponible en futuros dropdowns
            lstIdLotesSeleccionados.Remove(loteId);

            // Notificar cambio de cantidad a 0 para actualizar totales
            await OnCantidadChanged.InvokeAsync((loteId, 0));
        }

        // Notificar al padre para que remueva este LoteItem de la lista
        await OnRemoveLote.InvokeAsync(loteId);

        StateHasChanged();
    }
}