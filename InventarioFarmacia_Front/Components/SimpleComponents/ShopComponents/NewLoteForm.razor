@using InventarioFarmacia_Shared.DTOs.Lotes
@rendermode InteractiveServer
<div class="d-flex gap-2 mb-2 w-100">
    <EditForm Model="LoteNuevo" OnValidSubmit="() => OnCrearLote.InvokeAsync(LoteNuevo)" class="w-100">
        <DataAnnotationsValidator />
        <div class="d-flex gap-2">
            <div class="d-flex flex-column w-50">
                <div class="input-group">
                    <i class="bi bi-check-circle input-group-text"></i>
                    <InputText class="form-control" placeholder="Ingrese el número de lote"
                        @bind-Value="LoteNuevo.Nro_Lote" />
                </div>
                <ValidationMessage For="@(() => LoteNuevo.Nro_Lote)" class="text-danger small" />
            </div>
            <div class="d-flex flex-column w-25">
                <InputDate class="form-control" @bind-Value="LoteNuevo.Fecha_Vencimiento" />
                <ValidationMessage For="@(() => LoteNuevo.Fecha_Vencimiento)" class="text-danger small" />
            </div>
        </div>

        <div class="d-flex gap-2 mt-2">
            <button class="btn btn-success w-75" type="submit">
                <i class="bi bi-box"></i>
                <span>Crear nuevo lote</span>
            </button>
            <button class="btn btn-outline-danger w-25" @onclick="OnCancelarCreacion" type="button">
                <i class="bi bi-trash"></i> Remover
            </button>
        </div>
    </EditForm>
</div>

@code {
    public LoteNuevoDTO LoteNuevo { get; set; } = new();

    protected override void OnInitialized()
    {
        LoteNuevo.Fecha_Vencimiento = DateOnly.FromDateTime(DateTime.Now.AddMonths(6));
    }

    [Parameter] public EventCallback OnCancelarCreacion { get; set; }
    [Parameter] public EventCallback<LoteNuevoDTO> OnCrearLote { get; set; }
}