@page "/categorias"
@using InventarioFarmacia_Front.Components.SimpleComponents.CardItems;
@using InventarioFarmacia_Front.Components.SimpleComponents.Loader;
@using InventarioFarmacia_Shared.DTOs.Categorias;
@inject Services.Categories.ICategoriaService CategoriaServices
@inject IJSRuntime JS;
@rendermode InteractiveServer

<PageTitle>Categorías</PageTitle>

@if(isLoading)
{
    <Cargador/>
}

<div class="container-fluid mt-3">
    <div class="row mb-4">
        <div class="col-12">
            <div class="bg-primary text-white p-4 rounded-3 shadow d-flex align-items-center">
                <div class="col-md-6">
                    <h1 class="fw-bold mb-2"><i class="bi bi-folder-fill"></i> Categorías</h1>
                <p class="mb-0 opacity-75">Organiza y administra las categorías de productos de tu farmacia</p>
                </div>
                <div class="col-md-6 d-flex align-items-center justify-content-end gap-4">
                    <div class="col-md-3 col-sm-6">
            <div class="card border-0 bg-light">
                <div class="card-body text-center">
                    <h3 class="text-primary fw-bold">@categorias.Count()</h3>
                    <p class="text-muted mb-0">Total de Categorías</p>
                </div>
            </div>
        </div>
        <div class="col-md-3 col-sm-6 ">
            <div class="card border-0 bg-light">
                <div class="card-body text-center">
                    <h3 class="text-success fw-bold">@categorias.Sum(c => c.CantidadProductos)</h3>
                    <p class="text-muted mb-0">@(categorias.Sum(c => c.CantidadProductos) != 1 ? "Productos Clasificados" : "Producto Clasificado")</p>
                </div>
            </div>
        </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-8">
            <div class="input-group">
                <span class="input-group-text bg-white border-end-0">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" class="form-control border-start-0" 
                       placeholder="Buscar categorías..." 
                       @bind="filtroNombre" 
                       @oninput="FiltrarCategorias">
            </div>
        </div>
        <div class="col-md-4 text-end">
            <button class="btn btn-outline-secondary me-2" @onclick="LimpiarFiltros">
                <i class="bi bi-arrow-clockwise"></i> Limpiar
            </button>
        </div>
    </div>

    <div class="row">
        @foreach (var categoria in categoriasFiltradas)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                    <CategoriaCardItem Id="@categoria.Id" 
                                       Nombre="@categoria.Nombre" 
                                       Descripcion="@categoria.Descripcion"
                                       Icono="@categoria.Icono"
                                       ProductosCount="@categoria.CantidadProductos" />
                </div>
            }
    </div>
</div>

<NavLink href="/categorias/agregar" 
         class="btn btn-primary position-fixed shadow-lg" 
         style="bottom: 20px; right: 20px; border-radius: 50%; width: 60px; height: 60px; display: flex; align-items: center; justify-content: center; font-size: 24px; z-index: 1050;">
        <span class="bi bi-plus-lg"></span>
</NavLink>

@code {
    private IEnumerable<CategoriaInfoCardDTO> categorias = Enumerable.Empty<CategoriaInfoCardDTO>();
    private IEnumerable<CategoriaInfoCardDTO> categoriasFiltradas = Enumerable.Empty<CategoriaInfoCardDTO>();
    private string filtroNombre = string.Empty;
    private bool isLoading = true;
    private bool hasRendered = false;
    protected override async Task OnInitializedAsync()
{
    isLoading = true;
    try
    {
        await CargarCategorias();
    }
    finally
    {
        isLoading = false;
    }
}
    private async Task CargarCategorias()
    {
        try
        {
            categorias = await CategoriaServices.GetCategoriasAsync();   
            categoriasFiltradas = categorias;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar categorías: {ex.Message}");
        }
    }

    private void FiltrarCategorias(ChangeEventArgs e)
    {
        filtroNombre = e.Value?.ToString() ?? string.Empty;
        
        if (string.IsNullOrWhiteSpace(filtroNombre))
        {
            categoriasFiltradas = categorias;
        }
        else
        {
            categoriasFiltradas = categorias
                .Where(c => c.Nombre.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase) ||
                           (c.Descripcion?.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase) ?? false))
                .ToList();
        }
        
        StateHasChanged();
    }

    private void LimpiarFiltros()
    {
        filtroNombre = string.Empty;
        categoriasFiltradas = categorias;
        StateHasChanged();
    }
}
