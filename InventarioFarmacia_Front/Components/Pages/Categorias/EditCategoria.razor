@page "/categorias/editar/{id:int}"
@using InventarioFarmacia_Shared;
@using InventarioFarmacia_Front.Components.SimpleComponents.Modals;
@using System.ComponentModel.DataAnnotations;
@using InventarioFarmacia_Shared.DTOs.Categorias;
@using InventarioFarmacia_Front.Components.SimpleComponents.Loader;
@inject Services.Categories.ICategoriaService CategoriaServices
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Editar Categor√≠a</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex align-items-center mb-3">
                <div>
                    <h1 class="fw-bold mb-1"><i class="bi bi-pencil-fill"></i> Edicion de Categor√≠a</h1>
                    <p class="text-muted mb-0">Edita la categor√≠a para organizar tus productos</p>
                </div>
            </div>
        </div>
    </div>
    <div class="row w-100">
        <div class="col-lg-12 col-xl-12">
            <div class="card shadow border-0">
                <div class="card-header bg-primary bg-gradient text-white">
                    <h5 class="card-title mb-0 fw-bold"><i class="bi bi-pencil-fill"></i> Informaci√≥n de la Categor√≠a</h5>
                </div>
                <div class="card-body p-4">
                    <EditForm Model="@CategoriaEditada" OnValidSubmit="EditarCategoria" FormName="AgregarCategoriaForm">
                        <DataAnnotationsValidator />

                        <div class="mb-4">
                            <label for="nombre" class="form-label fw-semibold">
                                Nombre de la Categor√≠a <span class="text-danger">*</span>
                            </label>
                            <InputText id="nombre" 
                                       class="form-control form-control-lg" 
                                       @bind-Value="CategoriaEditada.Nombre" 
                                       placeholder="Ej: Analg√©sicos, Vitaminas, etc." />
                            <ValidationMessage For="@(() => CategoriaEditada.Nombre)" class="text-danger small" />
                        </div>

                        <div class="mb-4">
                            <label for="descripcion" class="form-label fw-semibold">
                                Descripci√≥n
                            </label>
                            <InputText id="descripcion" 
                                           class="form-control" 
                                           @bind-Value="CategoriaEditada.Descripcion" 
                                           placeholder="Describe brevemente el tipo de productos que incluye esta categor√≠a..." />
                            <ValidationMessage For="@(() => CategoriaEditada.Descripcion)" class="text-danger small" />
                            <div class="form-text">Opcional: Ayuda a identificar mejor el prop√≥sito de la categor√≠a</div>
                        </div>

                        <div class="mb-4">
                            <label for="icono" class="form-label fw-semibold">
                                Icono Representativo
                            </label>
                            <div class="row">
                                <div class="col-md-8">
                                    <InputText id="icono" 
                                               class="form-control" 
                                               @bind-Value="CategoriaEditada.Icono" 
                                               placeholder="Ej: üíä, üß¥, ü©π, etc." />
                                    <ValidationMessage For="@(() => CategoriaEditada.Icono)" class="text-danger small" />
                                    <div class="form-text">Usa un emoji que represente la categor√≠a</div>
                                </div>
                                <div class="col-md-4 text-center">
                                    @if (!string.IsNullOrEmpty(CategoriaEditada.Icono))
                                    {
                                        <div class="border rounded p-3 bg-light">
                                            <span style="font-size: 2rem;">@CategoriaEditada.Icono</span>
                                            <small class="d-block text-muted">Vista previa</small>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="border rounded p-3 bg-light text-muted">
                                            <span style="font-size: 2rem;">üìÅ</span>
                                            <small class="d-block">Por defecto</small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label fw-semibold text-muted">
                                <i class="bi bi-light-fill"></i> Iconos Sugeridos
                            </label>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var sugerencia in iconesSugeridos)
                                {
                                    <button type="button" 
                                            class="btn btn-outline-secondary btn-sm" 
                                            @onclick="() => SeleccionarIcono(sugerencia.Icono)"
                                            title="@sugerencia.Nombre">
                                        @sugerencia.Icono @sugerencia.Nombre
                                    </button>
                                }
                            </div>
                        </div>

                        <div class="d-flex gap-3 justify-content-between">
                            <button class="btn btn-outline-secondary me-3" @onclick="CerrarModalYRegresar">
                                ‚Üê Regresar
                            </button>
                            <div>
                                <button type="button" 
                                    class="btn btn-outline-danger px-4" 
                                    @onclick="CerrarModalYRegresar">
                                Cancelar
                            </button>
                            <button type="submit" 
                                    class="btn btn-outline-primary px-4 fw-semibold">
                                Editar Categor√≠a
                            </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@if(MostrarModal)
{
    @if (RegistroExitoso)
    {
        <ModalProducto Mensaje="Se edit√≥ la categor√≠a exitosamente" Titulo="¬°√âxito!" OnAceptar="CerrarModalYRegresar" Exito=true/>
    }
    else
    {
        <ModalProducto Mensaje="Error al editar la categoria" Titulo="Error" OnAceptar="CerrarModalYRegresar" Exito=false/>
    }
}

@if(isLoading){ <Cargador /> }

@code {
    [SupplyParameterFromForm]
    private CategoriaEdicionDTO CategoriaEditada { get; set; } = new();
    private bool RegistroExitoso { get; set; } = false;
    private bool MostrarModal { get; set; } = false;

    [Parameter]
    public int id { get; set; } 
    private readonly List<IconoSugerencia> iconesSugeridos = new()
    {
        new("üíä", "Medicamentos"),
        new("üß¥", "L√≠quidos"),
        new("ü©π", "Primeros Auxilios"),
        new("üåü", "Vitaminas"),
        new("üß™", "Laboratorio"),
        new("üè•", "Hospital"),
        new("ü¶∑", "Dental"),
        new("üëÅÔ∏è", "Oftalmolog√≠a"),
        new("ü§±", "Beb√©s"),
        new("üßº", "Higiene")
    };
    private bool isLoading = false;
    private bool hasRendered = false;
    protected override async Task OnInitializedAsync()
    {
        CategoriaEditada = await CategoriaServices.GetCategoriaByIdForEditAsync(id);
    }

    private async Task EditarCategoria()
    {
        try
        {
            isLoading = true;
            var resultado = await CategoriaServices.UpdateCategoriaAsync(CategoriaEditada);
            await Task.Delay(1000);
            isLoading = false;
            RegistroExitoso = resultado;
            MostrarModal = resultado;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al crear la categor√≠a: {ex.Message}");
            RegistroExitoso = false;
            MostrarModal = true;
        }
        
        StateHasChanged();
    }

    private void SeleccionarIcono(string icono)
    {
        CategoriaEditada.Icono = icono;
        StateHasChanged();
    }

    private void CerrarModal()
    {
        MostrarModal = false;
        StateHasChanged();
    }

    private void CerrarModalYRegresar()
    {
        MostrarModal = false;
        Navigation.NavigateTo("/categorias");
    }

    public class IconoSugerencia
    {
        public string Icono { get; set; }
        public string Nombre { get; set; }

        public IconoSugerencia(string icono, string nombre)
        {
            Icono = icono;
            Nombre = nombre;
        }
    }
}
