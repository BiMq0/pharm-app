@page "/inventarios"
@inject IJSRuntime JS;
@inject Services.Inventarios.IInventarioService InventarioService
@using InventarioFarmacia_Shared.DTOs.Inventarios
@rendermode InteractiveServer

<div class="container-fluid p-0" style="height: 85vh !important;">
    <div class="row g-3 h-100 px-4">
        @foreach (var inventario in inventarioToListDTOs)
        {
            <div class="col-md-6 h-100">
                <NavLink class="text-decoration-none h-100 d-block">
                    <div class="card h-100 border-0 shadow-lg overflow-hidden inventory-card position-relative">
                        <div class="card-img-overlay d-flex flex-column justify-content-center align-items-center text-center position-absolute w-100 h-100"
                            style="background: linear-gradient(135deg, rgba(220, 53, 69, 0.9), rgba(253, 126, 20, 0.8));">

                            <div class="mb-4">
                                <i class="bi bi-building text-white"
                                    style="font-size: 5rem; filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.3));"></i>
                            </div>

                            <h2 class="card-title text-white fw-bold mb-3"
                                style="text-shadow: 2px 2px 4px rgba(0,0,0,0.5);">
                                @inventario.Nombre
                            </h2>
                        </div>
                    </div>
                </NavLink>
            </div>
        }
    </div>
</div>

@if (mostrarKratos)
{
    <div class="kratos-container">
        <img src="https://media.tenor.com/-mgYKYQQw8YAAAAe/warter-white-god-of-war.png" class="kratos-easteregg" />
    </div>
}

@code {
    private List<InventarioToListDTO> inventarioToListDTOs = new();
    private bool mostrarKratos = false;
    protected override async Task OnInitializedAsync()
    {
        inventarioToListDTOs = (await InventarioService.GetInventarioGeneralAsync()).ToList();
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var dotnetRef = DotNetObjectReference.Create(this);

                var module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/easteregg.js");
                Console.WriteLine("Modulo ingresando a konami code");
                await module.InvokeVoidAsync("iniciarKonami", dotnetRef);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error inicializando easter egg: {ex.Message}");
            }
        }
    }

    [JSInvokable]
    public void MostrarKratos()
    {
        mostrarKratos = !mostrarKratos;
        StateHasChanged();
    }
}