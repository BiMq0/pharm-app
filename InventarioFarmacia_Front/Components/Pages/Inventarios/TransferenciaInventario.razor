@page "/inventarioTransferencia"
@using InventarioFarmacia_Front.Components.SimpleComponents.Loader
@using InventarioFarmacia_Front.Components.SimpleComponents.TransferComponents
@using InventarioFarmacia_Front.Components.SimpleComponents.Modals
@using InventarioFarmacia_Shared.DTOs.Inventarios
@using InventarioFarmacia_Shared.DTOs.Products
@using InventarioFarmacia_Shared.DTOs.Lotes
@using System.Threading.Tasks
@inject Services.Inventarios.IInventarioService InventarioService
@inject Services.Products.IProductoService ProductServices
@inject Services.Lotes.ILoteService LoteService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Transferencia de Inventario</PageTitle>

@if (EstadoCargador.IsLoading)
{
    <Cargador />
}

<div class="container-fluid">
    <div class="card shadow mt-3">
        <div class="card-header bg-primary text-white fs-4">
            <i class="bi bi-arrow-left-right"></i>
            Transferencia de Inventario
        </div>
        <div class="card-body">
            <form class="mb-3 position-relative" @onsubmit="MostrarModalConfirmacion">
                <div
                    class="row d-flex justify-content-between border rounded p-1 border-3 border-start-0 border-top-0 border-end-0 pb-3">
                    <div class="col-12 d-flex gap-3 p-0">
                        <div
                            class="bg-secondary-subtle rounded col-6 p-3 d-flex flex-column align-items-center justify-content-center gap-2">
                            <span class="text-muted text-center fw-bold fs-5">Inventario de Origen</span>
                            <select class="form-select" @bind="inventarioOrigenId">
                                <option value="0" disabled selected>Seleccione inventario de origen</option>
                                @foreach (var inventario in inventariosDisponibles)
                                {
                                    <option value="@inventario.Id">@inventario.Nombre</option>
                                }
                            </select>
                        </div>
                        <div
                            class="bg-secondary-subtle rounded col-6 p-3 d-flex flex-column align-items-center justify-content-center gap-2">
                            <span class="text-muted text-center fw-bold fs-5">Inventario de Destino</span>
                            <select class="form-select" @bind="inventarioDestinoId">
                                <option value="0" disabled selected>Seleccione inventario de destino</option>
                                @foreach (var inventario in inventariosDisponibles.Where(i => i.Id !=
                                                                inventarioOrigenId))
                                {
                                    <option value="@inventario.Id">@inventario.Nombre</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-center mt-2 flex-column">
                    @if (inventarioOrigenSeleccionado != null && inventarioOrigenSeleccionado.Id > 0)
                    {
                        @for (int i = 0; i < itemsTransferencia.Count(); i++)
                        {
                            var index = i;
                            <TransferItem @ref="itemsTransferencia[index]"
                                Product="@(inventarioOrigenSeleccionado.Productos![i])"
                                Lotes="@(inventarioOrigenSeleccionado.Lotes?.Where(l => l.CantidadProductosDisponibles > 0 && l.Id_Producto == inventarioOrigenSeleccionado.Productos![i].Id).ToList() ?? new List<LoteSimpleToInventoryDTO>())" />
                        }
                    }
                    else
                    {
                        <span class="text-muted fw-bold fs-5 text-center">Seleccione un inventario de origen para cargar los
                            productos</span>
                    }
                </div>

                <button class="btn btn-primary position-fixed fw-bold px-2 py-0"
                    style="bottom: 20px; right: 20px; display: flex; align-items: center; justify-content: center;"
                    type="submit">
                    Realizar transferencia <i class="bi bi-arrow-right fs-4"></i>
                </button>
            </form>
        </div>
    </div>
</div>

@if (MostrarModalConfirmacionCondition)
{
    <ModalConfirmacion OnCancelar="OcultarModalConfirmacion" OnAceptar="RealizarTransferencia" />
}

@if (MostrarModalMensajeCondition)
{
    @if (ResultadoOperacion)
    {
        <ModalMensaje Exito="ResultadoOperacion" OnAceptar="VolverAInventarios" Titulo='Transferencia Exitosa' />
    }
    else
    {
        <ModalMensaje Exito="ResultadoOperacion" OnAceptar="OcultarModalMensaje" Titulo='Error en la Transferencia' />
    }
}


@code {
    private List<InventarioGeneralDTO> inventariosDisponibles = new();
    private List<TransferItem> itemsTransferencia = new();
    private InventarioGeneralDTO inventarioOrigenSeleccionado = new();
    private int _inventarioOrigenId = 0;
    private int inventarioOrigenId
    {
        get
        {
            return _inventarioOrigenId;
        }
        set
        {
            _inventarioOrigenId = value;
            inventarioOrigenSeleccionado = inventariosDisponibles.FirstOrDefault(i => i.Id == value) ?? new InventarioGeneralDTO();
            CargarProductos();
        }
    }
    private int inventarioDestinoId { get; set; } = 0;
    private object transferenciaData = new();


    private List<LoteToTransferProductsDTO> lstLotesToTransfer { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            EstadoCargador.Activar();
            await CargarInventarios();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al recuperar datos: {ex.Message}");
        }
        finally
        {
            EstadoCargador.Desactivar();
        }
    }

    private async Task CargarInventarios()
    {
        for (int i = 1; i <= 2; i++)
        {
            inventariosDisponibles.Add(await InventarioService.ObtenerInventarioGeneralAsync(i));
        }
    }


    private void CargarProductos()
    {
        var productos = inventarioOrigenSeleccionado?.Productos ?? new List<ProductoInfoToInventoryDTO>();
        if (inventarioOrigenSeleccionado != null && inventarioOrigenSeleccionado.Id > 0)
        {
            itemsTransferencia.Clear();
            foreach (var producto in productos)
            {
                var transferItem = new TransferItem();
                itemsTransferencia.Add(transferItem);
            }
        }
        StateHasChanged();
    }

    private async void RealizarTransferencia()
    {
        if (inventarioOrigenId > 0 && inventarioDestinoId > 0 && itemsTransferencia.Any())
        {
            foreach (var item in itemsTransferencia)
            {
                foreach (var lote in item.CantidadesPorLote)
                {
                    if (lote.Value > 0)
                    {
                        lstLotesToTransfer.Add(new LoteToTransferProductsDTO
                        {
                            Id = lote.Key,
                            CantidadATransferir = lote.Value
                        });
                    }
                }
            }
            await TransferirItems();
        }
    }

    private async Task TransferirItems()
    {
        try
        {
            EstadoCargador.Activar();
            var resultado = await LoteService.TransferirItems(lstLotesToTransfer, inventarioDestinoId);
            ResultadoOperacion = resultado;
            OcultarModalConfirmacion();
            MostrarModalMensaje();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al realizar la transferencia: {ex.Message}");
        }
        finally
        {
            EstadoCargador.Desactivar();
        }
    }
    private void VolverAInventarios()
    {
        Navigation.NavigateTo("/inventarios");
    }


    #region Gestion de Modals
    private string mensajeModal = string.Empty;
    private bool MostrarModalConfirmacionCondition = false;
    private bool MostrarModalMensajeCondition = false;
    private bool ResultadoOperacion = false;

    #region Metodos de gestion de Modals
    private void MostrarModalConfirmacion()
    {
        MostrarModalConfirmacionCondition = true;
        StateHasChanged();
    }

    private void OcultarModalConfirmacion()
    {
        MostrarModalConfirmacionCondition = false;
        StateHasChanged();
    }

    private void MostrarModalMensaje()
    {
        MostrarModalMensajeCondition = true;
        StateHasChanged();
    }

    private void OcultarModalMensaje()
    {
        MostrarModalMensajeCondition = false;
        StateHasChanged();
    }
    #endregion
    #endregion
}