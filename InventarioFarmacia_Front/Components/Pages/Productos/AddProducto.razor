@page "/productos/agregar"
@using InventarioFarmacia_Shared.DTOs.Products;
@using InventarioFarmacia_Shared.DTOs.Categorias;
@using InventarioFarmacia_Front.Components.SimpleComponents.Modals;
@inject Services.Products.IProductoService ProductServices
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer

<PageTitle>Agregar Producto</PageTitle>

<h1 class="fw-bold position-sticky top-0 bg-white">Agregar Producto</h1>
<div class="container-fluid">
    <EditForm Model="@ProductoNuevo" OnValidSubmit="AgregarProducto" FormName="AgregarProductoForm">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="nombre" class="form-label">Nombre de Producto (*)</label>
        <InputText id="nombre" class="form-control" @bind-Value="ProductoNuevo.Nombre" placeholder="Ingrese el nombre del producto" />
        <ValidationMessage For="@(() => ProductoNuevo.Nombre)" />
    </div>

    <div class="mb-3">
        <label for="nombreClinico" class="form-label">Nombre Clínico de Producto (*)</label>
        <InputText id="nombreClinico" class="form-control" @bind-Value="ProductoNuevo.Nombre_Clinico" placeholder="Ingrese el nombre clínico del producto" />
        <ValidationMessage For="@(() => ProductoNuevo.Nombre_Clinico)" />
    </div>
    
    <div class="mb-3">
        <label for="precio" class="form-label">Precio por unidad (*)</label>
        <InputNumber id="precio" class="form-control" @bind-Value="ProductoNuevo.Precio_Unitario" placeholder="Ingrese el precio por unidad en Bs." />
        <ValidationMessage For="@(() => ProductoNuevo.Precio_Unitario)" />
    </div>
    
    <div class="mb-3">
        <label for="precio_Caja" class="form-label">Precio por Caja</label>
        <InputNumber id="precio_Caja" class="form-control" @bind-Value="ProductoNuevo.Precio_Caja" placeholder="Ingrese el precio por caja en Bs." />
        <ValidationMessage For="@(() => ProductoNuevo.Precio_Caja)" />
    </div>

    <div class="mb-3">
        <label for="existencias_por_caja" class="form-label">Existencias por Caja</label>
        <InputNumber id="existencias_por_caja" class="form-control" @bind-Value="ProductoNuevo.Existencias_Por_Caja" placeholder="Ingrese las existencias por caja" />
        <ValidationMessage For="@(() => ProductoNuevo.Existencias_Por_Caja)" />
    </div>

    <div class="mb-3">
        <label for="tiene_subunidades" class="form-label">¿Tiene Subunidades? <span class="text-muted">Ej. Pastillas</span></label>
        <InputCheckbox id="tiene_subunidades" class="form-check-input" @bind-Value="ProductoNuevo.Tiene_Subunidades" />
    </div>

    @if(ProductoNuevo?.Tiene_Subunidades == true)
    {
        <div class="mb-3">
            <label for="subunidades" class="form-label">Unidades por existencia</label>
            <InputNumber id="subunidades" class="form-control" @bind-Value="ProductoNuevo.Unidades_Por_Existencia" placeholder="Ingrese las subunidades del producto" />

            @if (ProductoNuevo?.Unidades_Por_Existencia is null || ProductoNuevo.Unidades_Por_Existencia <= 0)
            {
                <div class="text-danger">Debe ingresar una cantidad válida de subunidades o desmarcar la opción.</div>
            }
        </div>
    }

    <div class="mb-3">
        <label for="categoria" class="form-label">Categoria del producto (*)</label>
        <InputSelect id="categoria" class="form-control" @bind-Value="categoriaSeleccionada" @onchange="OnCategoriaChanged">
            <option value="">Seleccione una categoría</option>
            @foreach (var categoria in categorias)
            {
                <option value="@categoria.Nombre">@categoria.Nombre</option>
            }
        </InputSelect>
        @if (string.IsNullOrEmpty(categoriaSeleccionada))
        {
            <div class="text-danger small">Debe seleccionar una categoría.</div>
        }
    </div>

    <div class="mb-3">
        <label for="imagen" class="form-label">Imagen del Producto (*)</label>
        <InputFile id="imagen" class="form-control" OnChange="OnImageSelected" accept="image/*" />
        
        @* Quitar ValidationMessage problemático *@
        @if (string.IsNullOrEmpty(ProductoNuevo?.Ruta_Imagen))
        {
            <div class="text-danger small">Debe seleccionar una imagen.</div>
        }
        @if (!string.IsNullOrEmpty(ProductoNuevo?.Ruta_Imagen))
        {
            <small class="text-muted">Archivo seleccionado: @ProductoNuevo.Ruta_Imagen</small>
        }
        @if (!string.IsNullOrEmpty(imagePreviewUrl))
        {
            <div class="mt-2">
                <img src="@imagePreviewUrl" alt="Vista previa" class="img-thumbnail" style="max-width: 200px; max-height: 200px;" />
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Agregar Producto</button>
    </EditForm>
</div>


 @* Condicional para mostrar modal *@
@if(MostrarModal)
{
    @if (RegistroExitoso)
    {
        <ModalProducto Mensaje="Producto agregado exitosamente" Titulo="Éxito" OnAceptar="CerrarModal" Exito="true" />
    }
    else
    {
        <ModalProducto Mensaje="Error al agregar producto" Titulo="Error" OnAceptar="CerrarModal" Exito="false" />
    }
}

@code{
    [SupplyParameterFromForm]
    private ProductoNuevoDTO ProductoNuevo { get; set; } = new();
    private bool RegistroExitoso { get; set; } = false;
    private bool MostrarModal { get; set; } = false; 
    
    private string imagePreviewUrl = string.Empty;
    private const long MaxFileSize = 5 * 1024 * 1024;
    private List<CategoriaToNewProductoDTO> categorias = new();
    

    private string categoriaSeleccionada = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (ProductoNuevo == null)
        {
            ProductoNuevo = new ProductoNuevoDTO();
        }
        
        if (ProductoNuevo.Categoria == null)
        {
            ProductoNuevo.Categoria = new CategoriaToNewProductoDTO();
        }
        categorias = new List<CategoriaToNewProductoDTO>()
        {
            new CategoriaToNewProductoDTO { Nombre = "Medicamentos" },
            new CategoriaToNewProductoDTO { Nombre = "Suplementos" },
            new CategoriaToNewProductoDTO { Nombre = "Equipos Médicos" },
            new CategoriaToNewProductoDTO { Nombre = "Cosméticos" },
            new CategoriaToNewProductoDTO { Nombre = "Higiene Personal" }
        };
        
        await Task.CompletedTask;
        StateHasChanged(); 
    }

    private void OnCategoriaChanged(ChangeEventArgs e)
    {
        categoriaSeleccionada = e.Value?.ToString() ?? string.Empty;

        if (ProductoNuevo?.Categoria != null)
        {
            ProductoNuevo.Categoria.Nombre = categoriaSeleccionada;
        }
        
        StateHasChanged();
    }
    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if (file.Size > MaxFileSize)
            {
                Console.WriteLine("El archivo es demasiado grande. Máximo 5MB.");
                return;
            }
            if (!file.ContentType.StartsWith("image/"))
            {
                Console.WriteLine("Solo se permiten archivos de imagen.");
                return;
            }
            try
            {
                var uploadsPath = Path.Combine(Environment.WebRootPath, "uploads", "productos");
                if (!Directory.Exists(uploadsPath))
                {
                    Directory.CreateDirectory(uploadsPath);
                }

                // Generar nombre único p1ara el archivo
                var fileName = $"{Guid.NewGuid()}_{file.Name}";
                var filePath = Path.Combine(uploadsPath, fileName);

                // Guardar el archivo
                using var stream = file.OpenReadStream(MaxFileSize);
                using var fileStream = new FileStream(filePath, FileMode.Create);
                await stream.CopyToAsync(fileStream);

                ProductoNuevo.Ruta_Imagen = $"/uploads/productos/{fileName}";
                imagePreviewUrl = ProductoNuevo.Ruta_Imagen;

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al guardar la imagen: {ex.Message}");
            }
        }
    }

    private void AgregarProducto()
    {
        try
        {
            if (string.IsNullOrEmpty(categoriaSeleccionada))
            {
                Console.WriteLine("Error: Debe seleccionar una categoría");
                RegistroExitoso = false;
                MostrarModal = true;
                return;
            }

            if (string.IsNullOrEmpty(ProductoNuevo?.Ruta_Imagen))
            {
                Console.WriteLine("Error: Debe seleccionar una imagen");
                RegistroExitoso = false;
                MostrarModal = true;
                return;
            }

            if (ProductoNuevo?.Categoria != null)
            {
                ProductoNuevo.Categoria.Nombre = categoriaSeleccionada;
            }

            //var resultado = await ProductServices.CrearProducto(ProductoNuevo);
            RegistroExitoso = true; 
            MostrarModal = true;
            
            // Limpiar formulario solo si fue exitoso
            ProductoNuevo = new ProductoNuevoDTO();
            ProductoNuevo.Categoria = new CategoriaToNewProductoDTO();
            categoriaSeleccionada = string.Empty;
            imagePreviewUrl = string.Empty;
        }
        catch (Exception ex)
        {
            RegistroExitoso = false;
            MostrarModal = true;
            Console.WriteLine($"Error: {ex.Message}");
        }
        
        StateHasChanged();
    }

    private void CerrarModal()
    {
        MostrarModal = false;
        StateHasChanged();
    }
}
