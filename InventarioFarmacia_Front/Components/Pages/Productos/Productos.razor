@page "/productos"
@using InventarioFarmacia_Front.Components.SimpleComponents.CardItems;
@using InventarioFarmacia_Shared.DTOs.Products;
@using InventarioFarmacia_Front.Components.SimpleComponents.Loader;
@inject Services.Products.IProductoService ProductServices
@rendermode InteractiveServer

<PageTitle>Productos</PageTitle>

@if (isLoading)
{
    <Cargador />
}

<div class="container-fluid mt-3">
    <div class="row mb-4">
        <div class="col-12">
            <div
                class="bg-primary text-white p-4 rounded-3 shadow d-flex justify-content-between align-items-center flex-wrap">
                <div>
                    <h1 class="fw-bold mb-2"><i class="bi bi-box-fill"></i> Productos</h1>
                    <p class="opacity-75 mb-0">Explora y administra los productos de farmacia</p>
                </div>
                <div class="col-md-2 col-sm-6">
                    <div class="card border-0 bg-light">
                        <div class="card-body text-center">
                            <h3 class="text-primary fw-bold">@productos.Count()</h3>
                            <p class="text-muted mb-0">Total de Productos</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="input-group">
                <span class="input-group-text bg-white border-end-0">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" class="form-control border-start-0" placeholder="Buscar productos..."
                    @bind="filtroNombre" @oninput="FiltrarProductos" />
            </div>
        </div>
        <div class="col-md-4 text-end">
            <button class="btn btn-outline-secondary me-2"
                @onclick="async () => { filtroNombre = string.Empty; await FiltrarProductos(); }">
                <i class="bi bi-arrow-clockwise "></i> Limpiar
            </button>
        </div>
    </div>


    <div class="row">
        <div class="col-12">
            <div class="d-flex flex-wrap gap-3">
                @foreach (var producto in productos)
                {
                    <ProductCardItem Id="@producto.Id" Nombre="@producto.Nombre" Precio_Unitario="@producto.Precio_Unitario"
                        Precio_Caja="@producto.Precio_Caja" StockTotal="@producto.StockTotal"
                        Ruta_Imagen="@producto.Ruta_Imagen" />
                }
            </div>
        </div>
    </div>
    <NavLink href="/productos/agregar" class="btn btn-primary position-fixed"
        style="bottom: 20px; right: 20px; border-radius: 50%; width: 60px; height: 60px; display: flex; align-items: center; justify-content: center; font-size: 24px;">
        <i class="bi bi-plus-lg"></i>
    </NavLink>
</div>



@code {
    private bool isLoading = true;
    private string filtroNombre = string.Empty;
    protected IEnumerable<ProductoInfoCardDTO> productos = new List<ProductoInfoCardDTO>();
    protected override async Task OnInitializedAsync()
    {
        productos = await ProductServices.GetProductosAsync();
        isLoading = false;
    }

    private async Task FiltrarProductos()
    {
        if (string.IsNullOrWhiteSpace(filtroNombre))
        {
            productos = await ProductServices.GetProductosAsync();
        }
        else
        {
            productos = await ProductServices.GetProductosAsync(filtroNombre);
        }
    }
}
