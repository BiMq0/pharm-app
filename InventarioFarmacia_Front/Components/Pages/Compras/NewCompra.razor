@page "/compras/nuevaCompra"
@using InventarioFarmacia_Shared.DTOs.Compras;
@using InventarioFarmacia_Front.Components.SimpleComponents.ShopComponents;
@using InventarioFarmacia_Shared.DTOs.Products;
@inject NavigationManager Navigation
@inject Services.Products.IProductoService ProductServices
@rendermode InteractiveServer

<PageTitle>Ordenar Productos</PageTitle>
<div class="container-fluid">
    <div class="card shadow mt-3">
        <div class="card-header bg-primary text-white fs-4">
            <i class="bi bi-pencil-fill"></i>
            Nueva orden de productos
        </div>
        <div class="card-body">
            <EditForm OnValidSubmit="CrearOrdenDeCompra" FormName="OrdenDeCompraForm" Model="compraNueva">
                <div
                    class="row d-flex justify-content-between border rounded p-1 border-3 border-start-0 border-top-0 border-end-0 pb-3 ">
                    <div class="col-6 d-flex gap-3 p-0">
                        <div
                            class="bg-secondary-subtle rounded col-6 p-3 d-flex flex-column align-items-center justify-content-center gap-2">
                            <span class="text-muted text-center fw-bold fs-5">Fecha de Pedido</span>
                            <InputDate @bind-Value="compraNueva.Fecha_Pedido" class="form-control" />
                        </div>
                        <div
                            class="bg-secondary-subtle rounded col-6 p-3 d-flex flex-column align-items-center justify-content-center gap-2">
                            <span class="text-muted text-center fw-bold fs-5">Fecha de Recibo esperada</span>
                            <InputDate @bind-Value="compraNueva.Fecha_Recibo" class="form-control" />
                        </div>
                    </div>

                    <div class="col-6 d-flex gap-3 justify-content-end align-items-center p-0">
                        <div
                            class="col-3 d-flex flex-column gap-2 rounded bg-warning-subtle p-4 align-items-center justify-content-center text-muted fw-semibold text-center">
                            <span class="fs-1">Bs. 0</span>
                            <span>Costo total de pedido</span>
                        </div>
                        <div
                            class="col-3 d-flex flex-column gap-2 rounded bg-success-subtle p-4 align-items-center justify-content-center text-muted fw-semibold text-center">
                            <span class="fs-1">@lstIdProductosSeleccionados.Count</span>
                            <span>Tipos de productos a ordenar</span>
                        </div>
                        <div
                            class="col-3 d-flex flex-column gap-2 rounded bg-primary-subtle p-4 align-items-center justify-content-center text-muted fw-semibold text-center">
                            <span class="fs-1">@TotalProductosIndividuales</span>
                            <span>Cantidad total de productos</span>
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-center mt-2 flex-column">
                    <CascadingValue Value="lstProductosDisponibles" Name="ProductosDisponibles">
                        <CascadingValue Value="lstIdProductosSeleccionados" Name="ProductosSeleccionados">
                            @for (int i = 0; i < itemsCompra.Count(); i++)
                            {
                                var index = i;
                                <ProductItem OnRemoveProduct="OnRemoveProductFromList"
                                    OnTotalChanged="@(total => OnTotalProductosChanged(index, total))"
                                    @ref="itemsCompra[index]" />
                            }
                        </CascadingValue>
                    </CascadingValue>
                    <button
                        class="btn @(AllSelected ? "btn-secondary" : "btn-outline-secondary") fw-bold w-100 d-flex align-items-center justify-content-center gap-2 px-3 mt-3"
                        @onclick="AgregarProducto" type="button">
                        @if (AllSelected)
                        {
                            <i class="bi bi-box fs-4"></i>
                            <span>No se tienen más productos disponibles</span>
                        }
                        else
                        {
                            <i class="bi bi-plus fs-4"></i>
                            <span>Agregar producto</span>
                        }
                    </button>
                </div>

                <button class="btn btn-primary position-fixed fw-bold px-2 py-0"
                    style="bottom: 20px; right: 20px; display: flex; align-items: center; justify-content: center;">
                    <i class="bi bi-check fs-3"></i>
                    Confirmar pedido
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private ComprasNuevaDTO compraNueva { get; set; } = new();
    public List<ProductoToNewCompraDTO> lstProductosDisponibles { get; set; } = new();
    public List<int> lstIdProductosSeleccionados { get; set; } = new();
    public int cantidadProductosAgregados = 0;
    protected List<ProductItem> itemsCompra { get; set; } = new();

    private bool AllSelected => lstProductosDisponibles.Count == cantidadProductosAgregados;

    private Dictionary<int, int> TotalesPorProducto { get; set; } = new();

    public int TotalProductosIndividuales => TotalesPorProducto.Values.Sum();

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        var productos = await ProductServices.GetProductosForOrdenAsync();
        lstProductosDisponibles = productos.ToList();
    }

    private void AgregarProducto()
    {
        if (!AllSelected)
        {
            var nuevoIndice = itemsCompra.Count;
            itemsCompra.Add(new ProductItem());
            TotalesPorProducto[nuevoIndice] = 0;
            cantidadProductosAgregados++;
            StateHasChanged();
        }
    }

    private void OnRemoveProductFromList(int Id_Producto)
    {
        lstIdProductosSeleccionados.Add(Id_Producto);
    }

    private void OnTotalProductosChanged(int indiceProducto, int nuevoTotal)
    {
        TotalesPorProducto[indiceProducto] = nuevoTotal;
        StateHasChanged();
    }

    private async Task CrearOrdenDeCompra()
    {
        foreach (var item in itemsCompra)
        {
            if (item.SelectedProduct != null)
            {
                var nuevoPrecio = (item.SelectedProduct.Precio_Unitario + item.SelectedProduct.Precio_Unitario) / 2;
                Console.WriteLine($"Producto ID: {item.SelectedProduct.Id}");
                Console.WriteLine($" - Nuevo Precio: {item.NuevoPrecio}, Precio Anterior: {item.SelectedProduct.Precio_Unitario}, Precio Promedio: {nuevoPrecio}");
                foreach(var lote in item.LotesToAddProducts)
                {
                    Console.WriteLine($" - Lote: {lote.Nro_Lote }, Cantidad: {item.CantidadesPorLote[lote.Id]}, Precio Total: {item.CantidadesPorLote[lote.Id] * item.NuevoPrecio }");
                }
            }
        }
    }
}