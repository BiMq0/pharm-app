@page "/compras/{id:int}"
@using InventarioFarmacia_Shared.DTOs.Compras
@using InventarioFarmacia_Shared.DTOs.Lotes
@using InventarioFarmacia_Domain.Constants
@using InventarioFarmacia_Front.Components.SimpleComponents.Loader
@using InventarioFarmacia_Front.Components.SimpleComponents.Modals;
@inject Services.Compras.ICompraService CompraService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Detalles de Compra</PageTitle>

@if (EstadoCargador.IsLoading)
{
    <Cargador />
}
else if (compra != null)
{
    <div class="container-fluid mt-3">
        <div class="row mb-4">
            <div class="col-12">
                <div class="bg-primary text-white p-4 rounded-3 shadow">
                    <div class="d-flex justify-content-between align-items-center flex-wrap">
                        <div>
                            <h1 class="fw-bold mb-2 d-flex align-items-center gap-4">
                                <i class="bi bi-receipt"></i>
                                Orden de Compra #@compra.Id

                                <span class="badge @GetEstadoBadgeClass(compra.Estado) fs-6 px-3 py-2"
                                    style="@GetEstadoBadgeStyle(compra.Estado)">
                                    @compra.Estado.ToString()
                                </span>
                            </h1>
                            <p class="opacity-75 mb-0">Detalles completos de la orden de compra</p>
                        </div>
                        @if (compra.Estado == Estados_OrdenDeCompra.PENDIENTE)
                        {
                            <div class="text-end d-flex gap-4">

                                <button class="btn btn-success shadow" @onclick='() => MostrarModalConfirmacion("Recibir")'>
                                    <i class="bi bi-check"></i>
                                    Compra Recibida
                                </button>
                                <button class="btn btn-danger shadow" @onclick='() => MostrarModalConfirmacion("Cancelar")'>
                                    <i class="bi bi-trash"></i>
                                    Cancelar Compra
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Información general de la compra -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="bi bi-calendar-event text-primary fs-1"></i>
                        <h6 class="text-muted mb-1">Fecha de Pedido</h6>
                        <h5 class="fw-bold">@compra.Fecha_Pedido.ToShortDateString()</h5>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="bi bi-calendar-check text-success fs-1"></i>
                        <h6 class="text-muted mb-1">Fecha de Recibo</h6>
                        <h5 class="fw-bold">@compra.Fecha_Recibo.ToShortDateString()</h5>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="bi bi-box-seam text-info fs-1"></i>
                        <h6 class="text-muted mb-1">Cantidad Total de Productos</h6>
                        <h5 class="fw-bold">@compra.CantidadTotalProductos</h5>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="bi bi-currency-dollar text-warning fs-1"></i>
                        <h6 class="text-muted mb-1">Costo Total</h6>
                        <h5 class="fw-bold">Bs. @compra.CostoTotal.ToString("N2")</h5>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lista de productos con lotes -->
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-list-ul"></i>
                            Productos y Lotes Incluidos
                        </h5>
                    </div>
                    <div class="card-body">
                        @foreach (var producto in compra.Productos)
                        {
                            <div class="card mb-3 p-3">
                                <div class="card-body">
                                    <div class="dropdown w-100">
                                        <button class="btn btn-outline-primary dropdown-toggle w-100 d-flex align-items-center"
                                            type="button" id="dropdownMenuButton" data-bs-toggle="dropdown"
                                            aria-expanded="false">
                                            <img src="@producto.Ruta_Imagen" alt="@producto.Nombre" class="img-fluid rounded"
                                                style="max-height: 50px; max-width: 50px; object-fit: cover; margin-right: 10px;" />
                                            <span class="fw-bold mb-0">@producto.Nombre</span>
                                        </button>

                                        <ul class="dropdown-menu w-100" aria-labelledby="dropdownMenuButton">
                                            @foreach (var lote in compra.Lotes.Where(l => l.Id_Producto == producto.Id))
                                            {
                                                <li>
                                                    <div class="dropdown-item d-flex justify-content-between align-items-center">
                                                        <div>
                                                            <strong>Lote #@lote.Nro_Lote</strong> - Cantidad:
                                                            @lote.CantidadProductosPedidos
                                                        </div>
                                                    </div>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-12 text-center">
                <button class="btn btn-outline-primary" @onclick="VolverACompras">
                    <i class="bi bi-arrow-left"></i> Volver a Compras
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid mt-3">
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i>
            No se pudo cargar la información de la orden de compra.
        </div>
        <button class="btn btn-primary" @onclick="VolverACompras">
            <i class="bi bi-arrow-left"></i> Volver a Compras
        </button>
    </div>
}

@if (EstadoCargador.IsLoading)
{
    <Cargador />
}

@if (MostrarModalConfirmacionCondition)
{
    switch (mensajeModal)
    {
        case "Recibir":
            <ModalConfirmacion OnAceptar="MarcarCompraRecibida" OnCancelar="OcultarModalConfirmacion" />
            break;
        case "Cancelar":
            <ModalConfirmacion OnAceptar="MarcarCompraCancelada" OnCancelar="OcultarModalConfirmacion" />
            break;
    }
}

@if (MostrarModalMensajeCondition)
{
    @if (ResultadoOperacion)
    {
        <ModalMensaje Exito="ResultadoOperacion" OnAceptar="VolverACompras"
            Titulo='@( "Compra " + (mensajeModal == "Recibir" ? "recibida" : "cancelada") + " con éxito")' />
    }
    else
    {
        <ModalMensaje Exito="ResultadoOperacion" OnAceptar="OcultarModalMensaje"
            Titulo='@( "Error al " + (mensajeModal == "Recibir" ? "recibir" : "cancelar") + " la compra")' />
    }
}


@code {
    [Parameter] public int Id { get; set; }

    private CompraDetalladaDTO? compra;

    protected override async Task OnInitializedAsync()
    {
        await CargarCompra();
    }

    private async Task CargarCompra()
    {
        EstadoCargador.Activar();
        try
        {
            compra = await CompraService.GetCompraById(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar la compra: {ex.Message}");
        }
        finally
        {
            EstadoCargador.Desactivar();
            StateHasChanged();
        }
    }

    private string GetEstadoBadgeClass(Estados_OrdenDeCompra estado)
    {
        var color = estado switch
        {
            Estados_OrdenDeCompra.RECIBIDO => Colores_EstadosCompra.RECIBIDO,
            Estados_OrdenDeCompra.PENDIENTE => Colores_EstadosCompra.PENDIENTE,
            Estados_OrdenDeCompra.CANCELADO => Colores_EstadosCompra.CANCELADO,
            _ => "#6c757d"
        };

        return $"text-white";
    }

    private string GetEstadoBadgeStyle(Estados_OrdenDeCompra estado)
    {
        var color = estado switch
        {
            Estados_OrdenDeCompra.RECIBIDO => Colores_EstadosCompra.RECIBIDO,
            Estados_OrdenDeCompra.PENDIENTE => Colores_EstadosCompra.PENDIENTE,
            Estados_OrdenDeCompra.CANCELADO => Colores_EstadosCompra.CANCELADO,
            _ => "#6c757d"
        };

        return $"background-color: {color}";
    }

    private void VolverACompras()
    {
        Navigation.NavigateTo("/compras");
    }

    private async Task MarcarCompraRecibida()
    {
        var resultado = await CompraService.ActualizarOrdenCompra(compra!.Id, (int)Estados_OrdenDeCompra.RECIBIDO);
        ResultadoOperacion = resultado;
        OcultarModalConfirmacion();
        MostrarModalMensaje();
    }
    private async Task MarcarCompraCancelada()
    {
        var resultado = await CompraService.ActualizarOrdenCompra(compra!.Id, (int)Estados_OrdenDeCompra.CANCELADO);
        ResultadoOperacion = resultado;
        OcultarModalConfirmacion();
        MostrarModalMensaje();
    }

    #region Gestion de Modals
    private string mensajeModal = string.Empty;
    private bool MostrarModalConfirmacionCondition = false;
    private bool MostrarModalMensajeCondition = false;
    private bool ResultadoOperacion = false;

    #region Metodos de gestion de Modals
    private void MostrarModalConfirmacion(string accion)
    {
        MostrarModalConfirmacionCondition = true;
        mensajeModal = accion;
        StateHasChanged();
    }

    private void OcultarModalConfirmacion()
    {
        MostrarModalConfirmacionCondition = false;
        StateHasChanged();
    }

    private void MostrarModalMensaje()
    {
        MostrarModalMensajeCondition = true;
        StateHasChanged();
    }

    private void OcultarModalMensaje()
    {
        MostrarModalMensajeCondition = false;
        StateHasChanged();
    }
    #endregion
    #endregion
}