@page "/compras/{id:int}"
@using InventarioFarmacia_Shared.DTOs.Compras
@using InventarioFarmacia_Shared.DTOs.Lotes
@using InventarioFarmacia_Domain.Constants
@using InventarioFarmacia_Front.Components.SimpleComponents.Loader
@inject Services.Compras.ICompraService CompraService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Detalles de Compra</PageTitle>

@if (isLoading)
{
    <Cargador />
}
else if (compra != null)
{
    <div class="container-fluid mt-3">
        <div class="row mb-4">
            <div class="col-12">
                <div class="bg-primary text-white p-4 rounded-3 shadow">
                    <div class="d-flex justify-content-between align-items-center flex-wrap">
                        <div>
                            <h1 class="fw-bold mb-2">
                                <i class="bi bi-receipt"></i>
                                Orden de Compra #@compra.Id
                            </h1>
                            <p class="opacity-75 mb-0">Detalles completos de la orden de compra</p>
                        </div>
                        <div class="text-end">
                            <span class="badge @GetEstadoBadgeClass(compra.Estado) fs-6 px-3 py-2"
                                style="@GetEstadoBadgeStyle(compra.Estado)">
                                @compra.Estado.ToString()
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Información general de la compra -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="bi bi-calendar-event text-primary fs-1"></i>
                        <h6 class="text-muted mb-1">Fecha de Pedido</h6>
                        <h5 class="fw-bold">@compra.Fecha_Pedido.ToShortDateString()</h5>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="bi bi-calendar-check text-success fs-1"></i>
                        <h6 class="text-muted mb-1">Fecha de Recibo</h6>
                        <h5 class="fw-bold">@compra.Fecha_Recibo.ToShortDateString()</h5>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="bi bi-box-seam text-info fs-1"></i>
                        <h6 class="text-muted mb-1">Cantidad Total de Productos</h6>
                        <h5 class="fw-bold">@compra.Lotes</h5>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="bi bi-currency-dollar text-warning fs-1"></i>
                        <h6 class="text-muted mb-1">Costo Total</h6>
                        <h5 class="fw-bold">Bs. @compra.CostoTotal.ToString("N2")</h5>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lista de productos con lotes -->
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-list-ul"></i>
                            Productos y Lotes Incluidos
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (compra.Lotes != null && compra.Lotes.Any())
                        {

                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-inbox text-muted fs-1"></i>
                                <p class="text-muted mt-2">No hay productos en esta orden de compra</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Botón de regreso -->
        <div class="row mt-4">
            <div class="col-12 text-center">
                <button class="btn btn-outline-primary" @onclick="VolverACompras">
                    <i class="bi bi-arrow-left"></i> Volver a Compras
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid mt-3">
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i>
            No se pudo cargar la información de la orden de compra.
        </div>
        <button class="btn btn-primary" @onclick="VolverACompras">
            <i class="bi bi-arrow-left"></i> Volver a Compras
        </button>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    private CompraDetalladaDTO? compra;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await CargarCompra();
    }

    private async Task CargarCompra()
    {
        isLoading = true;
        try
        {
            compra = await CompraService.GetCompraById(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar la compra: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetEstadoBadgeClass(Estados_OrdenDeCompra estado)
    {
        var color = estado switch
        {
            Estados_OrdenDeCompra.RECIBIDO => Colores_EstadosCompra.RECIBIDO,
            Estados_OrdenDeCompra.PENDIENTE => Colores_EstadosCompra.PENDIENTE,
            Estados_OrdenDeCompra.CANCELADO => Colores_EstadosCompra.CANCELADO,
            _ => "#6c757d"
        };

        return $"text-white";
    }

    private string GetEstadoBadgeStyle(Estados_OrdenDeCompra estado)
    {
        var color = estado switch
        {
            Estados_OrdenDeCompra.RECIBIDO => Colores_EstadosCompra.RECIBIDO,
            Estados_OrdenDeCompra.PENDIENTE => Colores_EstadosCompra.PENDIENTE,
            Estados_OrdenDeCompra.CANCELADO => Colores_EstadosCompra.CANCELADO,
            _ => "#6c757d"
        };

        return $"background-color: {color}";
    }

    private void VolverACompras()
    {
        Navigation.NavigateTo("/compras");
    }
}